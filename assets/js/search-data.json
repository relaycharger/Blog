{
  
    
        "post0": {
            "title": "Title",
            "content": ". Change Runtime to High Ram It works fine with Colab Pro . https://huggingface.co/docs/transformers/main_classes/pipelines . I need to run this on my computer at home. Not enough RAM on the free version of Gooogle colab . https://medium.com/@alains/just-5-lines-of-python-code-you-can-create-an-ai-essay-writer-31a3c153c2b . pip install torch torchvision torchaudio . Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/ Requirement already satisfied: torch in /usr/local/lib/python3.7/dist-packages (1.11.0+cu113) Requirement already satisfied: torchvision in /usr/local/lib/python3.7/dist-packages (0.12.0+cu113) Requirement already satisfied: torchaudio in /usr/local/lib/python3.7/dist-packages (0.11.0+cu113) Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from torch) (4.2.0) Requirement already satisfied: numpy in /usr/local/lib/python3.7/dist-packages (from torchvision) (1.21.6) Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from torchvision) (2.23.0) Requirement already satisfied: pillow!=8.3.*,&gt;=5.3.0 in /usr/local/lib/python3.7/dist-packages (from torchvision) (7.1.2) Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;torchvision) (2022.5.18.1) Requirement already satisfied: idna&lt;3,&gt;=2.5 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;torchvision) (2.10) Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;torchvision) (1.24.3) Requirement already satisfied: chardet&lt;4,&gt;=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;torchvision) (3.0.4) . pip install transformers . Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/ Collecting transformers Downloading transformers-4.19.2-py3-none-any.whl (4.2 MB) |████████████████████████████████| 4.2 MB 7.9 MB/s Requirement already satisfied: numpy&gt;=1.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (1.21.6) Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (2019.12.20) Requirement already satisfied: tqdm&gt;=4.27 in /usr/local/lib/python3.7/dist-packages (from transformers) (4.64.0) Collecting tokenizers!=0.11.3,&lt;0.13,&gt;=0.11.1 Downloading tokenizers-0.12.1-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (6.6 MB) |████████████████████████████████| 6.6 MB 38.6 MB/s Collecting pyyaml&gt;=5.1 Downloading PyYAML-6.0-cp37-cp37m-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_12_x86_64.manylinux2010_x86_64.whl (596 kB) |████████████████████████████████| 596 kB 58.9 MB/s Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers) (2.23.0) Requirement already satisfied: packaging&gt;=20.0 in /usr/local/lib/python3.7/dist-packages (from transformers) (21.3) Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers) (3.7.0) Collecting huggingface-hub&lt;1.0,&gt;=0.1.0 Downloading huggingface_hub-0.7.0-py3-none-any.whl (86 kB) |████████████████████████████████| 86 kB 5.6 MB/s Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from transformers) (4.11.4) Requirement already satisfied: typing-extensions&gt;=3.7.4.3 in /usr/local/lib/python3.7/dist-packages (from huggingface-hub&lt;1.0,&gt;=0.1.0-&gt;transformers) (4.2.0) Requirement already satisfied: pyparsing!=3.0.5,&gt;=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging&gt;=20.0-&gt;transformers) (3.0.9) Requirement already satisfied: zipp&gt;=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata-&gt;transformers) (3.8.0) Requirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;transformers) (2022.5.18.1) Requirement already satisfied: chardet&lt;4,&gt;=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;transformers) (3.0.4) Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;transformers) (1.24.3) Requirement already satisfied: idna&lt;3,&gt;=2.5 in /usr/local/lib/python3.7/dist-packages (from requests-&gt;transformers) (2.10) Installing collected packages: pyyaml, tokenizers, huggingface-hub, transformers Attempting uninstall: pyyaml Found existing installation: PyYAML 3.13 Uninstalling PyYAML-3.13: Successfully uninstalled PyYAML-3.13 Successfully installed huggingface-hub-0.7.0 pyyaml-6.0 tokenizers-0.12.1 transformers-4.19.2 . from transformers import pipeline . generator = pipeline(&#39;text-generation&#39;, model=&#39;EleutherAI/gpt-neo-2.7B&#39;) . prompt = &#39;Python tips for beginners&#39; # can be anything res = generator(prompt, max_length=2000, do_sample=True, temperature=0.9) . Setting `pad_token_id` to `eos_token_id`:50256 for open-end generation. . print(res[0][&#39;generated_text&#39;]) . Python tips for beginners A lot of people ask me questions and I&#39;m always happy to show them how I did it. I started writing this blog because I am very passionate about programming and I know a lot of things which are very useful when you are learning stuff about programming. In this blog I tell you how I did some of those things, or just how I thought how it could be done. Sometimes I show you other examples of programming I find nice. Most of all, I&#39;m glad when anyone enjoys watching my words. :) I&#39;m not a big fan of programming tutorials because I think they don&#39;t help much, even a step by step solution makes no sense if you only have the skills to do the task that you are doing. My own opinion is that learning by doing is more like music than a tutorial. If you have the opportunity to learn something by doing it, then I think it&#39;s really worth the time. Especially when you have a limited time and you are learning new skills. It takes a lot of time to write a good program, even for an experienced programmer. I would say that it takes approximately 10 hours or 3 weeks to write a really decent and usable program. How do you find the time? Here is what I do: 1. Create a task, problem with a simple description I start every writing something new by thinking about three major things. What I want to know, what I need to know, and what I don&#39;t want to know. Usually I start with the problem that I&#39;m trying to solve and what I need to do. The most important thing in writing code is to make sure that I always think from the user&#39;s point of view, not from the program&#39;s point of view. If you think in a program, you should not think in a user&#39;s program. When it comes to programming you have to think of user&#39;s code or input values from the user from the first few hours of your programming career. I can&#39;t spend 5 hours a day and think about what my first program is gonna do or what the user wants. My life is too busy right now, and I have much better things to do than write some stupid, dumb program. Also, I always try to make small (and quick) programs that don&#39;t take more time than it would to type out the same thing in a large program. Also, I do not like to spend too much time writing a program that would take a week to complete. That would be time that I could be spending on something else. 2. Create an outline When it comes to writing code I tend to write a lot with the goal in mind, or think to myself - this is what I&#39;m going to write. It is important to have an outline before writing. There is a lot of programs that are written with the idea that you need to write a simple program before starting the actual writing process. That&#39;s just stupid. If you have the chance to code something on your own time then I think you should. Here is how my first program was, it&#39;s just a way to present the question: This program answers the question from the book Code Complete, &#34;Can you write your own program with a small library of pre-written routines?&#34; You don&#39;t have to reinvent the wheel, you can just copy and paste the routines that are provided with the program, or what it calls &#34;the library&#34;. Then you will not have to work every time when you want to add new content or write new routines. Also, you won&#39;t have to worry about how to put the code and the routine together, because the code is already there. When people ask me for simple examples and tutorials, I often tell them that this is actually a programming language. They just have to put simple rules or commands in the program and they will receive output as if it was a real language. Here is how my second program would look: Program 2: A simple example for a simple program written in Python #!/usr/bin/env python import random def isTrue(x): if x == True: return True return False if isTrue(2): print(&#34;You win!&#34;) else: print(&#34;You lose!&#34;) 3. Write programs from the user&#39;s point of view The best programming books I read cover the whole process from the user&#39;s point of view. This is how I would write a big program: The user enters an input (number or boolean or whatever) The program computes and stores the result The user types another input and the program computes and displays the result This is how I would write small programs that do something from the user&#39;s point of view. For example, I would write a program to find a square number. Program 3: How to find the square number that is entered #!/usr/bin/env python import sys def findSquare(n): total = 0 while n &gt; 0: total += n % (2*n) if isTrue(total): return n The program receives input as n the number of the square and then it returns the square number. It is called an array. The basic idea of this program is that it divides every number by 2 and keeps all the divisible by 4 numbers that its result is smaller than or equal to the number n. You can also write a program that finds the smallest and largest number that are less than or equal to the number n. That is called a range. You can also make an array where you put different numbers as different indexes, and then you can sort them one after another. Then you take those indexes and put them in another array. Do all of this in the same program. Program 4: A program with the idea of arrays #!/usr/bin/env python import sys def findSquare(n): total = 0 while n &gt; 0: total += n % (2*n) if isTrue(total): return n total = [] for i in (1, 2, 3, 4, 5, 6, 7, 8, 9, 10): if total.count(max(total)) == 1: return max(total) + 1 if total.count(min(total)) == 1: return min(total) + 1 def findMax(n): max_total = 0 for i in range(1, 10): max_total += n % (2 * n) if isTrue(max_total): return i def findMin(n): min_total = 0 for i in range(1, 10): min_total += n % (2 * n) if isTrue(min_total): return i def sort_range(numbers, n): total = [] for i in range(1, len(numbers)): total.append(numbers[i]) total.sort() return total In this program you have to use lists and indexes. You have to write code to sort the list from smallest number to largest. This code will be called find_sorted_range.py. The idea of this program is to sort a given list of numbers and then to create a new sorted list. Then you just take the indexes of the first number in the original list and append them in the output list. In this way you will sort the given list just like you would sort a &#34;list of integers&#34;. Program 5: A program that does range #!/usr/bin/env python import sys def sort_range(nums, n): total = 0 for i in range(1, len(nums)): total += nums[i] if isTrue(total): return i return range(int(nums[0]), int(nums[-1])) In this program you have to use the indexes of the indexes of the number in the original list. Then you have to sort the list in the same way you sorted the numbers in the program 4. Program 6: A program that does find_sorted_range #!/usr/bin/env python import sys def sort_range(nums, n): total = 0 for i in range(1, len(nums)): total += nums[i] if isTrue(total): return i return range(int(nums[0]), int(nums[-1])) Here is how to write programs where you have to input some data from the user. Program 7: How to take the input from the user and convert it into some valid data #!/usr/bin/env python import sys # Inputs and output files def parse_input(inputs): total = list(inputs) # Here we store the input in the total variable print(&#34;&#34;*40+&#34;&gt; &#34; + total) def main(inputs): total = list(inputs) # Here we convert the input in list into something usable print(&#34;&#34;*40+&#34;&gt; &#34; + str(total[0])) def list_conversions(inputs): # Here we convert the input in list into something usable print(&#34;&#34;*40+&#34;&gt; &#34; + str(inputs)) def main(inputs): print(&#34;Enter number of inputs: &#34;) total = parse_input(inputs) print(&#34;&#34;*40+&#34;&gt; &#34; + total) def input_conversion(inputs): print(&#34;&#34;*40+&#34;&gt; &#34; + str(inputs)) def string_conversion( .",
            "url": "https://relaycharger.github.io/Blog/2022/06/18/2020-06-20-AI_generated_test.html",
            "relUrl": "/2022/06/18/2020-06-20-AI_generated_test.html",
            "date": " • Jun 18, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://relaycharger.github.io/Blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://relaycharger.github.io/Blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://relaycharger.github.io/Blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://relaycharger.github.io/Blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}